name: Build and Publish

on:
  push:
    branches: [ main, master ]
    tags: [ 'v*' ]
  pull_request:
    branches: [ main, master ]
  workflow_dispatch:

env:
  REGISTRY: ghcr.io
  IMAGE_NAME: ${{ github.repository }}

jobs:
  build-and-test:
    runs-on: ubuntu-latest
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4
      
    - name: Set up Tcl environment
      run: |
        sudo apt-get update
        sudo apt-get install -y tcl tcl-dev tcllib tk sqlite3 redis-server
        
        # Install additional packages that might be available
        sudo apt-get install -y tcl-tls || echo "tcl-tls not available"
        sudo apt-get install -y compface mboxgrep || echo "optional packages not available"
        
        # Check Tcl version
        echo "Tcl version:"
        echo 'puts [info patchlevel]; exit' | tclsh
        
    - name: Syntax check Tcl files
      run: |
        echo "Checking Tcl syntax..."
        syntax_errors=0
        
        # Find all Tcl files and check basic syntax
        find . -name "*.tcl" -type f -print0 | while IFS= read -r -d '' file; do
          echo "Checking: $file"
          
          # Check if file is readable and not empty
          if [ ! -r "$file" ]; then
            echo "✗ $file: not readable"
            syntax_errors=$((syntax_errors + 1))
            continue
          fi
          
          if [ ! -s "$file" ]; then
            echo "Warning: $file is empty"
            continue
          fi
          
          # Basic syntax check using Tcl's info complete
          if echo "info complete [cat \"$file\" | sed 's/\\/\\\\/g' | sed 's/\"/\\\"/g']" | tclsh > /dev/null 2>&1; then
            echo "✓ $file: syntax OK"
          else
            # For files that might have dependencies, just check they're valid text
            if file "$file" | grep -q "text"; then
              echo "✓ $file: valid text file (may have dependencies)"
            else
              echo "✗ $file: invalid file format"
              syntax_errors=$((syntax_errors + 1))
            fi
          fi
        done
        
        echo "Tcl syntax check completed"
        
    - name: Validate executable scripts
      run: |
        echo "Checking executable scripts..."
        for script in scripts/newsgetter scripts/newsutility scripts/newshub scripts/user_admin; do
          if [ -f "$script" ]; then
            echo "Checking $script..."
            head -1 "$script"
            if [ -x "$script" ]; then
              echo "$script is executable: OK"
            else
              echo "Warning: $script is not executable"
            fi
          fi
        done
        
        if [ -f "start" ]; then
          echo "Checking start script..."
          head -1 start
          if [ -x "start" ]; then
            echo "start script is executable: OK"
          else
            echo "Warning: start script is not executable"
          fi
        fi
        
    - name: Check configuration samples
      run: |
        echo "Validating configuration samples..."
        for config in scripts/ng_config.tcl.sample scripts/na_config.tcl.sample scripts/nu_config.tcl.sample; do
          if [ -f "$config" ]; then
            echo "Checking $config syntax..."
            if tclsh -c "source {$config}; puts \"$config: OK\"" 2>/dev/null; then
              echo "$config syntax is valid"
            else
              echo "Warning: $config may have syntax issues (this might be expected for sample files)"
            fi
          else
            echo "Warning: $config not found"
          fi
        done
        
    - name: Test basic database creation (dry run)
      run: |
        echo "Testing database creation script syntax..."
        if [ -f "scripts/db_create.tcl" ]; then
          # Test syntax without actually running (to avoid dependency issues)
          tclsh -c "
            set f [open {scripts/db_create.tcl} r]
            set content [read \$f]
            close \$f
            if {[catch {info complete \$content}]} {
              puts \"db_create.tcl has syntax errors\"
              exit 1
            }
            puts \"db_create.tcl syntax: OK\"
          "
        fi
        
    - name: Package application
      run: |
        echo "Creating application package..."
        mkdir -p dist
        
        # Create a tar.gz package excluding development files
        tar -czf dist/newsgrouper-${{ github.sha }}.tar.gz \
          --exclude='.git*' \
          --exclude='dist' \
          --exclude='*.swp' \
          --exclude='*~' \
          .
          
        # Create a version info file
        echo "commit: ${{ github.sha }}" > dist/version.txt
        echo "ref: ${{ github.ref }}" >> dist/version.txt
        echo "timestamp: $(date -u +%Y-%m-%dT%H:%M:%SZ)" >> dist/version.txt
        
        ls -la dist/
        
    - name: Upload build artifacts
      uses: actions/upload-artifact@v4
      with:
        name: newsgrouper-package
        path: dist/
        retention-days: 30

  # Container build job - only on main branch or tags
  container-build:
    runs-on: ubuntu-latest
    needs: build-and-test
    if: github.ref == 'refs/heads/main' || github.ref == 'refs/heads/master' || startsWith(github.ref, 'refs/tags/')
    
    permissions:
      contents: read
      packages: write
      
    steps:
    - name: Checkout code
      uses: actions/checkout@v4
      
    - name: Set up Docker Buildx
      uses: docker/setup-buildx-action@v3
      
    - name: Log in to Container Registry
      uses: docker/login-action@v3
      with:
        registry: ${{ env.REGISTRY }}
        username: ${{ github.actor }}
        password: ${{ secrets.GITHUB_TOKEN }}
        
    - name: Extract metadata
      id: meta
      uses: docker/metadata-action@v5
      with:
        images: ${{ env.REGISTRY }}/${{ env.IMAGE_NAME }}
        tags: |
          type=ref,event=branch
          type=ref,event=pr
          type=semver,pattern={{version}}
          type=semver,pattern={{major}}.{{minor}}
          type=semver,pattern={{major}}
          type=sha,prefix={{branch}}-
          
    - name: Create Dockerfile
      run: |
        cat > Dockerfile << 'EOF'
        FROM ubuntu:22.04
        
        # Avoid interactive prompts during installation
        ENV DEBIAN_FRONTEND=noninteractive
        
        # Install dependencies
        RUN apt-get update && apt-get install -y \
            tcl \
            tcl-dev \
            tcllib \
            tk \
            sqlite3 \
            redis-server \
            curl \
            && apt-get install -y tcl-tls || echo "tcl-tls not available" \
            && apt-get install -y compface || echo "compface not available" \
            && apt-get install -y mboxgrep || echo "mboxgrep not available" \
            && rm -rf /var/lib/apt/lists/*
            
        # Create app directory and user
        RUN useradd -m -s /bin/bash newsgrouper
        WORKDIR /app
        
        # Copy application files
        COPY --chown=newsgrouper:newsgrouper . /app/
        
        # Create data directories with proper permissions
        RUN mkdir -p /data /data2 /var/log/newsgrouper \
            && chown -R newsgrouper:newsgrouper /data /data2 /var/log/newsgrouper
        
        # Make scripts executable
        RUN chmod +x /app/start /app/scripts/* 2>/dev/null || true
        
        # Switch to non-root user
        USER newsgrouper
        
        # Expose port (default for tclhttpd)
        EXPOSE 8080
        
        # Health check
        HEALTHCHECK --interval=30s --timeout=10s --start-period=5s --retries=3 \
          CMD curl -f http://localhost:8080/ || exit 1
          
        # Start the application
        CMD ["/app/start"]
        EOF
        
    - name: Build and push container image
      uses: docker/build-push-action@v5
      with:
        context: .
        push: true
        tags: ${{ steps.meta.outputs.tags }}
        labels: ${{ steps.meta.outputs.labels }}
        cache-from: type=gha
        cache-to: type=gha,mode=max

  # Release job - only on tags
  release:
    runs-on: ubuntu-latest
    needs: [build-and-test, container-build]
    if: startsWith(github.ref, 'refs/tags/')
    
    permissions:
      contents: write
      
    steps:
    - name: Checkout code
      uses: actions/checkout@v4
      
    - name: Download build artifacts
      uses: actions/download-artifact@v4
      with:
        name: newsgrouper-package
        path: dist/
        
    - name: Create Release
      uses: actions/create-release@v1
      env:
        GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
      with:
        tag_name: ${{ github.ref_name }}
        release_name: Release ${{ github.ref_name }}
        body: |
          ## Newsgrouper Release ${{ github.ref_name }}
          
          ### Changes
          - Automated release created from tag ${{ github.ref_name }}
          - Container image available at: `ghcr.io/${{ github.repository }}:${{ github.ref_name }}`
          
          ### Installation
          1. Download the source package below
          2. Extract and follow README instructions for configuration
          3. Or use the container image: `docker pull ghcr.io/${{ github.repository }}:${{ github.ref_name }}`
          
          ### Requirements
          - Tcl 9.0 (currently requires manual upgrade from 8.6.x)
          - Redis server
          - NNTP server access
          - See README for complete dependency list
        draft: false
        prerelease: false
        
    - name: Upload Release Asset
      uses: actions/upload-release-asset@v1
      env:
        GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
      with:
        upload_url: ${{ steps.create_release.outputs.upload_url }}
        asset_path: dist/newsgrouper-${{ github.sha }}.tar.gz
        asset_name: newsgrouper-${{ github.ref_name }}.tar.gz
        asset_content_type: application/gzip